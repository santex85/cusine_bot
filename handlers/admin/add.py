from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from loader import db, bot
from keyboards.default.markups import (
    cancel_markup, back_markup, check_markup,
    all_right_message, back_message, cancel_message
)
from states import ProductState, CategoryState
from hashlib import md5
from states.user_mode_state import UserModeState
from keyboards.inline.categories import CategoryCallbackFactory
from aiogram.exceptions import TelegramBadRequest

router = Router()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@router.callback_query(F.data == 'add_category', UserModeState.ADMIN)
async def add_category_handler(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=cancel_markup())
    await state.set_state(CategoryState.title)

@router.message(CategoryState.title, F.text != cancel_message)
async def set_category_title_handler(message: Message, state: FSMContext):
    category_name = message.text
    idx = md5(category_name.encode('utf-8')).hexdigest()
    db.query('INSERT INTO categories (idx, title) VALUES (?, ?)', (idx, category_name))
    
    await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)

@router.message(CategoryState.title, F.text == cancel_message)
async def cancel_category_handler(message: Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@router.callback_query(CategoryCallbackFactory.filter(F.action == 'view'), UserModeState.ADMIN)
async def view_products_in_category(query: CallbackQuery, callback_data: CategoryCallbackFactory, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

@router.callback_query(F.data.startswith('delete_product_'))
async def delete_product_handler(query: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@router.message(F.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', UserModeState.ADMIN)
async def delete_category_handler(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

# --- –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', UserModeState.ADMIN)
async def back_to_categories(message: Message, state: FSMContext):
     await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...', reply_markup=ReplyKeyboardRemove())
     await state.clear()
     from .menu import process_settings
     await process_settings(message, state)


# =================================================================
# --- –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê ---
# =================================================================

# 1. –ù–∞—á–∞–ª–æ
@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', UserModeState.ADMIN)
async def add_product_start(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=cancel_markup())
    await state.set_state(ProductState.title)

# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ
@router.message(F.text == cancel_message, ProductState)
async def cancel_add_product(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)

# 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(ProductState.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=back_markup())
    await state.set_state(ProductState.body)

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(ProductState.body)
async def process_body(message: Message, state: FSMContext):
    await state.update_data(body=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', reply_markup=back_markup())
    await state.set_state(ProductState.image)

# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@router.message(ProductState.image, F.photo)
async def process_image(message: Message, state: FSMContext):
    # –í aiogram 3 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å file_id, –∞ –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª
    image_file_id = message.photo[-1].file_id
    await state.update_data(image=image_file_id)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):', reply_markup=back_markup())
    await state.set_state(ProductState.price)

# 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
@router.message(ProductState.price, lambda msg: msg.text.isdigit())
async def process_price(message: Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    data = await state.get_data()
    title = data.get("title")
    body = data.get("body")
    price = data.get("price")
    image = data.get("image")
    
    caption = f"""<b>{title}</b>

{body}

–¶–µ–Ω–∞: {price}‚ÇΩ."""
    await message.answer_photo(
        photo=image,
        caption=caption,
        reply_markup=check_markup()
    )
    await state.set_state(ProductState.confirm)

# 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(ProductState.confirm, F.text == all_right_message)
async def process_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    category_title = data.get('category_title')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    idx = md5(' '.join([
        data.get('title'), 
        data.get('body'), 
        str(data.get('price')), 
        category_title
    ]).encode('utf-8')).hexdigest()
    
    db.query('INSERT INTO products (idx, title, body, image, price, tag) VALUES (?, ?, ?, ?, ?, ?)',
             (idx, data.get('title'), data.get('body'), data.get('image'), data.get('price'), category_title))
             
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤
@router.message(ProductState.price)
async def process_price_invalid(message: Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏.")

@router.message(ProductState.image)
async def process_image_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ)
@router.message(F.text == back_message, ProductState)
async def process_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ProductState.body:
        await state.set_state(ProductState.title)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
    # –∏ —Ç.–¥. –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –ø–æ–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    else:
        await state.clear()
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.", reply_markup=ReplyKeyboardRemove())
        from .menu import process_settings
        await process_settings(message, state)
