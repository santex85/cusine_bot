from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from loader import db
from keyboards.default.markups import (
    cancel_markup, back_markup, check_markup,
    all_right_message, back_message, cancel_message
)
from states import ProductState
from states.category_state import CategoryState # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from hashlib import md5
from states.user_mode_state import UserModeState
from keyboards.inline.categories import CategoryCallbackFactory
from aiogram.exceptions import TelegramBadRequest

router = Router()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@router.callback_query(F.data == 'add_category', UserModeState.ADMIN)
async def add_category_handler(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=cancel_markup())
    await state.set_state(CategoryState.title)

@router.message(CategoryState.title, F.text != cancel_message)
async def set_category_title_handler(message: Message, state: FSMContext):
    category_name = message.text
    idx = md5(category_name.encode('utf-8')).hexdigest()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if db.fetchone('SELECT 1 FROM categories WHERE title = ?', (category_name,)):
        await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return
        
    db.query('INSERT INTO categories (idx, title) VALUES (?, ?)', (idx, category_name))
    
    await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from .menu import process_settings
    await process_settings(message, state)


@router.message(CategoryState.title, F.text == cancel_message)
async def cancel_category_handler(message: Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ---

def category_management_markup():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é')],
            [KeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')]
        ],
        resize_keyboard=True
    )

@router.callback_query(CategoryCallbackFactory.filter(F.action == 'view'), UserModeState.ADMIN)
async def view_products_in_category(query: types.CallbackQuery, callback_data: CategoryCallbackFactory, state: FSMContext):
    category_id = callback_data.id
    category_info = db.fetchone('SELECT title FROM categories WHERE idx = ?', (category_id,))
    
    if not category_info:
        await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    category_name = category_info[0]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(category_id=category_id, category_name=category_name)
    await state.set_state(CategoryState.viewing)
    
    await query.message.delete()
    # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    await query.message.answer(
        f'–í—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{category_name}</b>',
        reply_markup=category_management_markup()
    )
    await query.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@router.message(F.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', CategoryState.viewing)
async def delete_category_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get('category_id')
    category_name = data.get('category_name')

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    db.query('DELETE FROM products WHERE tag = ?', (category_id,))
    db.query('DELETE FROM categories WHERE idx = ?', (category_id,))
    
    await message.answer(
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    from .menu import process_settings
    await process_settings(message, state)


# --- –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', CategoryState.viewing)
async def back_to_categories(message: types.Message, state: FSMContext):
     await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...', reply_markup=ReplyKeyboardRemove())
     await state.clear()
     from .menu import process_settings
     await process_settings(message, state)


# =================================================================
# --- –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê ---
# =================================================================

# 1. –ù–∞—á–∞–ª–æ
@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', CategoryState.viewing)
async def add_product_start(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=cancel_markup())
    await state.set_state(ProductState.title)

# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ
@router.message(F.text == cancel_message, ProductState)
async def cancel_add_product(message: Message, state: FSMContext):
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_name = data.get('category_name', '—Ç–µ–∫—É—â—É—é')
    await state.set_state(CategoryState.viewing)
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—Å–µ –µ—â–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>.', 
                         reply_markup=category_management_markup())


# 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(ProductState.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=back_markup())
    await state.set_state(ProductState.body)

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(ProductState.body)
async def process_body(message: Message, state: FSMContext):
    await state.update_data(body=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', reply_markup=back_markup())
    await state.set_state(ProductState.image)

# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@router.message(ProductState.image, F.photo)
async def process_image(message: Message, state: FSMContext):
    image_file_id = message.photo[-1].file_id
    await state.update_data(image=image_file_id)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):', reply_markup=back_markup())
    await state.set_state(ProductState.price)

# 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
@router.message(ProductState.price, lambda msg: msg.text.isdigit())
async def process_price(message: Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    
    data = await state.get_data()
    caption = f"""<b>{data.get("title")}</b>

{data.get("body")}

–¶–µ–Ω–∞: {data.get("price")}‚ÇΩ."""

    await message.answer_photo(
        photo=data.get("image"),
        caption=caption,
        reply_markup=check_markup()
    )
    await state.set_state(ProductState.confirm)

# 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(ProductState.confirm, F.text == all_right_message)
async def process_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get('category_id') # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    if not category_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    idx = md5(f"{data.get('title')}{data.get('body')}{data.get('price')}".encode('utf-8')).hexdigest()
    
    db.query('INSERT INTO products (idx, title, body, photo, price, tag) VALUES (?, ?, ?, ?, ?, ?)',
             (idx, data.get('title'), data.get('body'), data.get('image'), data.get('price'), category_id)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º category_id
             
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=category_management_markup())
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(CategoryState.viewing)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤
@router.message(ProductState.price)
async def process_price_invalid(message: Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏.")

@router.message(ProductState.image)
async def process_image_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" 
@router.message(F.text == back_message, ProductState)
async def process_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == ProductState.body:
        await state.set_state(ProductState.title)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=cancel_markup())
    elif current_state == ProductState.image:
        await state.set_state(ProductState.body)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_markup())
    elif current_state == ProductState.price:
        await state.set_state(ProductState.image)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_markup())
    else: # –ù–∞ —à–∞–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ "–Ω–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ—Ç–º–µ–Ω–∞
        data = await state.get_data()
        category_name = data.get('category_name', '—Ç–µ–∫—É—â—É—é')
        await state.set_state(CategoryState.viewing)
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—Å–µ –µ—â–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>.', 
                             reply_markup=category_management_markup())
