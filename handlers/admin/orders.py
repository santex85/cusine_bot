from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from loader import db
from states.user_mode_state import UserModeState
from aiogram.filters.callback_data import CallbackData

class OrderCallbackFactory(CallbackData, prefix="order"):
    action: str # "status" –∏–ª–∏ "delete"
    order_id: int

def get_orders_markup(order_id: int, current_status: str):
    buttons = [
        [types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=OrderCallbackFactory(action="status_completed", order_id=order_id).pack())],
        [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=OrderCallbackFactory(action="status_processing", order_id=order_id).pack())],
        [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=OrderCallbackFactory(action="delete", order_id=order_id).pack())]
    ]
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
    buttons = [btn for btn in buttons if current_status not in btn[0].text.lower()]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

router = Router()

@router.message(F.text == 'üìà –ó–∞–∫–∞–∑—ã', UserModeState.ADMIN)
async def process_orders(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    active_orders = db.fetchall(
        "SELECT rowid, cid, usr_name, usr_address, products, status FROM orders WHERE status != '–≤—ã–ø–æ–ª–Ω–µ–Ω' ORDER BY rowid DESC"
    )

    if not active_orders:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return

    await message.answer("<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>")
    for order_id, cid, name, address, products, status in active_orders:
        products_list = products.replace('; ', '- ')
        text = (
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b>"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {name} (ID: {cid})"
            f"<b>–ê–¥—Ä–µ—Å:</b> {address}"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>- {products_list}"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status.capitalize()}"
        )
        markup = get_orders_markup(order_id, status)
        await message.answer(text, reply_markup=markup)

@router.callback_query(OrderCallbackFactory.filter(F.action.startswith("status_")))
async def process_status_change(query: types.CallbackQuery, callback_data: OrderCallbackFactory, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    order_id = callback_data.order_id
    new_status = "–≤—ã–ø–æ–ª–Ω–µ–Ω" if callback_data.action == "status_completed" else "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"

    db.query("UPDATE orders SET status = ? WHERE rowid = ?", (new_status, order_id))

    await query.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await query.message.edit_text(query.message.text + f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status.capitalize()}</b>")


@router.callback_query(OrderCallbackFactory.filter(F.action == "delete"))
async def process_delete_order(query: types.CallbackQuery, callback_data: OrderCallbackFactory, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑.
    """
    order_id = callback_data.order_id
    db.query("DELETE FROM orders WHERE rowid = ?", (order_id,))
    await query.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω.", show_alert=True)
    await query.message.delete()
