from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from loader import db
from states.user_mode_state import UserModeState
from states.notification_state import NotificationState
from keyboards.default.markups import cancel_markup, user_main_menu, admin_main_menu
import asyncio

router = Router()

CONFIRM_SEND_TEXT = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
CANCEL_SEND_TEXT = "üö´ –û—Ç–º–µ–Ω–∞"

def confirm_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=CONFIRM_SEND_TEXT)],
            [types.KeyboardButton(text=CANCEL_SEND_TEXT)]
        ],
        resize_keyboard=True
    )

@router.message(F.text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', UserModeState.ADMIN)
async def start_notification(message: types.Message, state: FSMContext):
    await state.set_state(NotificationState.get_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –Ω–µ–º—É –æ–¥–Ω–æ —Ñ–æ—Ç–æ.",
        reply_markup=cancel_markup()
    )

@router.message(NotificationState.get_message)
async def get_notification_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    await state.update_data(
        text=message.text or message.caption,
        photo_id=message.photo[-1].file_id if message.photo else None
    )
    
    await state.set_state(NotificationState.confirm)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    await message.answer("<b>–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>")
    if message.photo:
        await message.answer_photo(
            photo=message.photo[-1].file_id,
            caption=message.text or message.caption
        )
    else:
        await message.answer(message.text)
        
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=confirm_keyboard())


@router.message(NotificationState.confirm, F.text == CONFIRM_SEND_TEXT)
async def send_notification(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    text = data.get('text')
    photo_id = data.get('photo_id')
    
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=admin_main_menu())

    user_ids = db.fetchall("SELECT cid FROM users")
    successful_sends = 0
    failed_sends = 0

    for (user_id,) in user_ids:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user_id, photo=photo_id, caption=text)
            else:
                await bot.send_message(chat_id=user_id, text=text)
            successful_sends += 1
            await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        except Exception as e:
            failed_sends += 1
            print(f"Failed to send message to {user_id}: {e}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_sends}"
    )

@router.message(NotificationState.confirm, F.text == CANCEL_SEND_TEXT)
@router.message(NotificationState.get_message, F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel_notification(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_main_menu())
