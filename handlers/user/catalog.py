import logging
from aiogram.types import Message, CallbackQuery
from keyboards.inline.categories import categories_markup, category_cb
from keyboards.inline.products_from_catalog import product_markup, product_cb
from aiogram.utils.callback_data import CallbackData
from aiogram.types.chat import ChatActions
from loader import dp, db, bot
from .menu import catalog
# –£–¥–∞–ª–µ–Ω import IsUser
from aiogram.dispatcher import FSMContext # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç FSMContext
from states.user_mode_state import UserModeState # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç UserModeState


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥' - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER
@dp.message_handler(text=catalog, state=UserModeState.USER)
async def process_catalog(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª–µ–Ω state
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
                         reply_markup=categories_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER
@dp.callback_query_handler(category_cb.filter(action='view'), state=UserModeState.USER) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def category_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext): # –î–æ–±–∞–≤–ª–µ–Ω state

    products = db.fetchall('''SELECT * FROM products product
    WHERE product.tag = (SELECT title FROM categories WHERE idx=?) 
    AND product.idx NOT IN (SELECT idx FROM cart WHERE cid = ?)''',
                           (callback_data['id'], query.message.chat.id))

    await query.answer('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.')
    # –ü–µ—Ä–µ–¥–∞–µ–º state –≤ show_products –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –Ω—É–∂–µ–Ω, –∏–Ω–∞—á–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    await show_products(query.message, products)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER
@dp.callback_query_handler(product_cb.filter(action='add'), state=UserModeState.USER) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def add_product_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext): # –î–æ–±–∞–≤–ª–µ–Ω state

    db.query('INSERT INTO cart VALUES (?, ?, 1)',
             (query.message.chat.id, callback_data['id']))

    await query.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    await query.message.delete()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è show_products - –Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, state –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
async def show_products(m, products):

    if len(products) == 0:

        await m.answer('–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò¢')

    else:

        await bot.send_chat_action(m.chat.id, ChatActions.TYPING)

        for idx, title, body, image, price, _ in products:

            markup = product_markup(idx, price)
            text = f"""<b>{title}</b>

{body}

–¶–µ–Ω–∞: {price}‚ÇΩ."""

            await m.answer_photo(photo=image,
                                 caption=text,
                                 reply_markup=markup)
