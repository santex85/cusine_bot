from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from loader import db
from states.user_mode_state import UserModeState
from keyboards.inline.categories import categories_markup, CategoryCallbackFactory
from keyboards.inline.products_from_catalog import product_markup, CatalogProductCallbackFactory
from aiogram.exceptions import TelegramBadRequest

router = Router()

@router.message(F.text == 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', UserModeState.USER)
async def process_catalog(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=categories_markup()
    )

@router.callback_query(CategoryCallbackFactory.filter(F.action == 'view'), UserModeState.USER)
async def category_callback_handler(query: types.CallbackQuery, callback_data: CategoryCallbackFactory, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    products = db.fetchall(
        '''SELECT p.* FROM products p 
           WHERE p.tag = ? 
           AND p.idx NOT IN (SELECT idx FROM cart WHERE cid = ?)''',
        (callback_data.id, query.from_user.id)
    )
    
    await query.answer('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.')
    await show_products(query.message, products, callback_data.id)

@router.callback_query(CatalogProductCallbackFactory.filter(F.action == 'add'), UserModeState.USER)
async def add_product_callback_handler(query: types.CallbackQuery, callback_data: CatalogProductCallbackFactory, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    db.query('INSERT OR IGNORE INTO cart (cid, idx, quantity) VALUES (?, ?, 1)', 
             (query.from_user.id, callback_data.id))
    
    await query.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    try:
        await query.message.delete()
    except TelegramBadRequest:
        pass # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

async def show_products(message: types.Message, products: list, category_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    if not products:
        await message.answer('–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò¢')
        return

    for idx, title, body, image, price, _ in products:
        markup = product_markup(idx, price, category_id) # –ü–µ—Ä–µ–¥–∞–µ–º category_id
        caption = f"""<b>{title}</b>

{body}

–¶–µ–Ω–∞: {price}‚ÇΩ."""
        await message.answer_photo(
            photo=image,
            caption=caption,
            reply_markup=markup
        )
