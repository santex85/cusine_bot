from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from loader import db
from states.user_mode_state import UserModeState
from keyboards.default.markups import user_main_menu
from keyboards.inline.products_from_cart import product_markup, CartProductCallbackFactory
from states.checkout_state import CheckoutState
import logging
import json

router = Router()


async def show_cart(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
    """
    cart_products = db.fetchall(
        'SELECT pro.idx, pro.title, pro.price, cart.quantity '
        'FROM cart cart LEFT JOIN products pro ON cart.idx = pro.idx '
        'WHERE cart.cid = ?',
        (message.from_user.id,)
    )

    if not cart_products:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.', reply_markup=user_main_menu())
        return

    total_price = 0
    await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:')
    
    for idx, title, price, quantity in cart_products:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –∞ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if title is None or price is None:
            db.query('DELETE FROM cart WHERE cid = ? AND idx = ?', (message.from_user.id, idx))
            logging.info(f"Removed unavailable product {idx} from cart for user {message.from_user.id}")
            continue

        total_price += price * quantity
        markup = product_markup(idx, quantity)
        text = f"""<b>{title}</b>
–¶–µ–Ω–∞: {price}‚ÇΩ
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç."""
        await message.answer(text, reply_markup=markup)

    await message.answer(f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ.',
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[
                                 [types.KeyboardButton(text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')],
                                 [types.KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]
                             ],
                             resize_keyboard=True))
    await state.set_state(CheckoutState.check_cart)


@router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞', UserModeState.USER)
async def process_cart_command(message: types.Message, state: FSMContext):
    await show_cart(message, state)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', CheckoutState.check_cart)
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=user_main_menu())


@router.callback_query(CartProductCallbackFactory.filter(), UserModeState.USER)
async def product_callback_handler(query: types.CallbackQuery, callback_data: CartProductCallbackFactory, state: FSMContext):
    user_id = query.from_user.id
    product_id = callback_data.id

    if callback_data.action == 'increase':
        db.query('UPDATE cart SET quantity = quantity + 1 WHERE cid = ? AND idx = ?', (user_id, product_id))
    elif callback_data.action == 'decrease':
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Ç–∞–µ–º, –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ
        db.query('UPDATE cart SET quantity = quantity - 1 WHERE cid = ? AND idx = ?', (user_id, product_id))
        db.query('DELETE FROM cart WHERE cid = ? AND idx = ? AND quantity <= 0', (user_id, product_id))
    elif callback_data.action == 'delete':
        db.query('DELETE FROM cart WHERE cid = ? AND idx = ?', (user_id, product_id))

    await query.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –∫–æ—Ä–∑–∏–Ω—ã, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ
    await query.message.delete()
    await show_cart(query.message, state)


# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (Checkout FSM) ---

@router.message(CheckoutState.check_cart, F.text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def checkout_start(message: types.Message, state: FSMContext):
    await state.set_state(CheckoutState.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=types.ReplyKeyboardRemove())


@router.message(CheckoutState.name)
async def checkout_process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CheckoutState.address)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')


@router.message(CheckoutState.address)
async def checkout_process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    user_name = data.get('name')
    user_address = data.get('address')
    
    cart_products = db.fetchall(
        'SELECT pro.title, pro.price, cart.quantity '
        'FROM cart cart LEFT JOIN products pro ON cart.idx = pro.idx '
        'WHERE cart.cid = ?',
        (message.from_user.id,)
    )

    if not cart_products:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=user_main_menu())
        await state.clear()
        return

    total_price = 0
    products_list = []
    for title, price, quantity in cart_products:
        total_price += price * quantity
        products_list.append(f"{title} x{quantity}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(products="; ".join(products_list), total_price=total_price)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>"
        f"<b>–ò–º—è:</b> {user_name}"
        f"<b>–ê–¥—Ä–µ—Å:</b> {user_address}"
        f"<b>–¢–æ–≤–∞—Ä—ã:</b>" + "".join([f"- {item}" for item in products_list]) + ""
        f"<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_price}"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ')]],
            resize_keyboard=True
        )
    )
    await state.set_state(CheckoutState.confirm)


@router.message(CheckoutState.confirm, F.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ')
async def checkout_finish(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.query(
        'INSERT INTO orders (cid, usr_name, usr_address, products, status) VALUES (?, ?, ?, ?, ?)',
        (user_id, data.get('name'), data.get('address'), data.get('products'), '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
    )

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.query('DELETE FROM cart WHERE cid = ?', (user_id,))

    await message.answer(
        '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</b>'
        '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'
        '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "üöö –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏".',
        reply_markup=user_main_menu()
    )
    await state.clear()
