from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from loader import db, bot
from states.user_mode_state import UserModeState
from keyboards.default.markups import user_main_menu
from keyboards.inline.products_from_cart import product_markup, CartProductCallbackFactory
from states.checkout_state import CheckoutState
import logging

router = Router()

@router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞', UserModeState.USER)
async def process_cart(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cart_products = db.fetchall(
        'SELECT pro.idx, pro.title, pro.price, cart.quantity '
        'FROM cart cart LEFT JOIN products pro ON cart.idx = pro.idx '
        'WHERE cart.cid = ?',
        (message.from_user.id,)
    )

    if not cart_products:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    total_price = 0
    await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:')
    
    for idx, title, price, quantity in cart_products:
        total_price += price * quantity
        markup = product_markup(idx, quantity)
        text = f"""<b>{title}</b>
–¶–µ–Ω–∞: {price}‚ÇΩ
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç."""
        await message.answer(text, reply_markup=markup)

    await message.answer(f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?',
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[[types.KeyboardButton(text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')]],
                             resize_keyboard=True))
    await state.set_state(CheckoutState.check_cart)

@router.callback_query(CartProductCallbackFactory.filter(), UserModeState.USER)
async def product_callback_handler(query: types.CallbackQuery, callback_data: CartProductCallbackFactory, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—É–≤–µ–ª–∏—á–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å).
    """
    user_id = query.from_user.id
    product_id = callback_data.id
    action = callback_data.action

    if action == 'increase':
        db.query('UPDATE cart SET quantity = quantity + 1 WHERE cid = ? AND idx = ?', (user_id, product_id))
    elif action == 'decrease':
        current_quantity = db.fetchone('SELECT quantity FROM cart WHERE cid = ? AND idx = ?', (user_id, product_id))[0]
        if current_quantity > 1:
            db.query('UPDATE cart SET quantity = quantity - 1 WHERE cid = ? AND idx = ?', (user_id, product_id))
        else:
            db.query('DELETE FROM cart WHERE cid = ? AND idx = ?', (user_id, product_id))
    elif action == 'delete':
        db.query('DELETE FROM cart WHERE cid = ? AND idx = ?', (user_id, product_id))

    await query.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await process_cart(query.message, state)


@router.message(CheckoutState.check_cart, F.text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def checkout_process(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    await state.set_state(CheckoutState.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=types.ReplyKeyboardRemove())

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±—É–¥—É—Ç –∑–¥–µ—Å—å) ...
# –Ø –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å.
# –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è CheckoutState.name, CheckoutState.address –∏ —Ç.–¥.
