import logging
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loader import dp, db
from .menu import delivery_status as delivery_status_text
from aiogram.dispatcher import FSMContext
from states.user_mode_state import UserModeState

@dp.message_handler(text=delivery_status_text, state=UserModeState.USER)
async def process_delivery_status(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.")

    try:
        orders_data = db.fetchall(
            'SELECT id, cid, usr_name, usr_address, products, status FROM orders WHERE cid=?',
            (message.chat.id,)
        )
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –∏–∑ –ë–î: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    try:
        products_data = db.fetchall('SELECT idx, title, price FROM products')
        product_dict = {str(p[0]): {'title': p[1], 'price': p[2]} for p in products_data}
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        product_dict = {}
        await message.answer("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö. –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏.")

    if not orders_data:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
    else:
        await delivery_status_answer(message, orders_data, product_dict)

async def delivery_status_answer(message: Message, orders_data: list, product_dict: dict):
    for order in orders_data:
        logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {order}")
        try:
            order_id, cid, usr_name, usr_address, products_string, order_status = order

            order_info = f'üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b>'

            items = []
            if isinstance(products_string, str) and products_string:
                items = products_string.split(' ')
            else:
                logging.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}.")

            total_order_price = 0
            order_items_details = ""

            if items:
                for item in items:
                    if '=' in item:
                        try:
                            item_parts = item.split('=')
                            product_id = str(item_parts[0])
                            quantity = int(item_parts[1])

                            product_info = product_dict.get(product_id, {})
                            product_name = product_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                            product_price = product_info.get('price', 0)

                            position_total = quantity * product_price
                            order_items_details += f'  ‚Ä¢ {product_name}: {quantity} —à—Ç. –ø–æ {product_price}‚ÇΩ (–≤—Å–µ–≥–æ: {position_total}‚ÇΩ)'
                            total_order_price += position_total

                        except (ValueError, IndexError) as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ '{item}' –≤ –∑–∞–∫–∞–∑–µ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {e}")
                            order_items_details += f'  ‚Ä¢ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {item}'
                            continue
                    else:
                        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ: '{item}' –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}.")
                        order_items_details += f'  ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {item}'
            else:
                order_items_details = '  (–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç)'

            order_info += order_items_details
            order_info += f'<b>–°—É–º–º–∞:</b> {total_order_price}‚ÇΩ'

            status_display = order_status if order_status is not None and order_status != "" else "–ù–µ —É–∫–∞–∑–∞–Ω"
            order_info += f'<b>–°—Ç–∞—Ç—É—Å:</b> {status_display}'

            await message.answer(order_info, parse_mode='HTML')

        except IndexError as e:
            logging.error(f"IndexError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {order}. –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤? –û—à–∏–±–∫–∞: {e}")
            continue

        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {order}. –û—à–∏–±–∫–∞: {e}")
            continue
