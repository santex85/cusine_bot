import logging # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from aiogram.types import Message
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å, —É–∂–µ –µ—Å—Ç—å)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loader import dp, db # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ db - –≤–∞—à DatabaseManager
from .menu import delivery_status as delivery_status_text # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
# –£–¥–∞–ª–µ–Ω import IsUser
from aiogram.dispatcher import FSMContext # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç FSMContext
from states.user_mode_state import UserModeState # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç UserModeState


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üöö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞' - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER
@dp.message_handler(text=delivery_status_text, state=UserModeState.USER) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –Ω–∞ state
async def process_delivery_status(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª–µ–Ω state
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ä—è–¥–∫–∞.
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ö–µ–º—É: id, cid, usr_name, usr_address, products, status
        orders_data = db.fetchall(
            'SELECT id, cid, usr_name, usr_address, products, status FROM orders WHERE cid=?',
            (message.chat.id,)
        )
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –∏–∑ –ë–î: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ idx
    try:
        products_data = db.fetchall('SELECT idx, title, price FROM products')
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ idx
        product_dict = {str(p[0]): {'title': p[1], 'price': p[2]} for p in products_data}
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        product_dict = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        await message.answer("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö. –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏.")


    if not orders_data:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.') # –í–æ–∑–º–æ–∂–Ω–æ, "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö" –∏–ª–∏ "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏", –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ "–∞–∫—Ç–∏–≤–Ω—ã–º–∏"
    else:
        await delivery_status_answer(message, orders_data, product_dict) # –ü–µ—Ä–µ–¥–∞–µ–º product_dict

async def delivery_status_answer(message: Message, orders_data: list, product_dict: dict):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞).
        orders_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (SELECT id, cid, ...).
        product_dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ idx.
    """
    response_text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>"
    has_orders_to_display = False # –§–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–¥–∞–ª–æ—Å—å –ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑

    for order in orders_data:
        logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {order}")
        try:
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫: id, cid, usr_name, usr_address, products, status
            order_id, cid, usr_name, usr_address, products_string, order_status = order

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ ---
            order_info = f'üì¶ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b>' # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∑–∞–∫–∞–∑–∞

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ---
            items = []
            if isinstance(products_string, str) and products_string:
                items = products_string.split(' ')
            else:
                logging.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}.")


            total_order_price = 0
            order_items_details = "" # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ

            if items:
                for item in items:
                    if '=' in item:
                        try:
                            item_parts = item.split('=')
                            product_id = str(item_parts[0]) # –ü—Ä–∏–≤–æ–¥–∏–º ID —Ç–æ–≤–∞—Ä–∞ –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
                            quantity = int(item_parts[1])

                            product_info = product_dict.get(product_id, {})
                            product_name = product_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                            product_price = product_info.get('price', 0)

                            position_total = quantity * product_price
                            order_items_details += f'  ‚Ä¢ {product_name}: {quantity} —à—Ç. –ø–æ {product_price}‚ÇΩ (–≤—Å–µ–≥–æ: {position_total}‚ÇΩ'

                            total_order_price += position_total

                        except (ValueError, IndexError) as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ '{item}' –≤ –∑–∞–∫–∞–∑–µ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {e}")
                            order_items_details += f'  ‚Ä¢ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {item}'
                            continue
                    else:
                        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ: '{item}' –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}.")
                        order_items_details += f'  ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {item}'

            else:
                 order_items_details = '  (–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç)' # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç


            order_info += order_items_details # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
            order_info += f'–°—É–º–º–∞: {total_order_price}‚ÇΩ' # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞

            # --- –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ---
            status_display = order_status if order_status is not None and order_status != "" else "–ù–µ —É–∫–∞–∑–∞–Ω"
            order_info += f'–°—Ç–∞—Ç—É—Å: <b>{status_display}</b>'

            # --- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∫ –æ–±—â–µ–º—É —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç–∞ ---
            response_text += order_info + "" # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            has_orders_to_display = True # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å

        except IndexError as e:
            logging.error(f"IndexError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {order}. –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤? –û—à–∏–±–∫–∞: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # response_text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order_id}. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑

        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cid}: {order}. –û—à–∏–±–∫–∞: {e}")
            # response_text += f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order_id}."
            continue


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if has_orders_to_display:
        await message.answer(response_text, parse_mode='HTML') # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    else:
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∏ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.")
